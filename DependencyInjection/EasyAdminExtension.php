<?php

/*
 * This file is part of the EasyAdminBundle.
 *
 * (c) Javier Eguiluz <javier.eguiluz@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace JavierEguiluz\Bundle\EasyAdminBundle\DependencyInjection;

use Symfony\Component\HttpKernel\DependencyInjection\Extension;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;
use Symfony\Component\Config\FileLocator;

class EasyAdminExtension extends Extension
{
    public function load(array $configs, ContainerBuilder $container)
    {
        // process bundle's configuration parameters
        $backendConfiguration = $this->processConfiguration(new Configuration(), $configs);
        $backendConfiguration['entities'] = $this->getEntitiesConfiguration($backendConfiguration['entities']);

        $container->setParameter('easyadmin.config', $backendConfiguration);

        // load bundle's services
        $loader = new XmlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));
        $loader->load('services.xml');
    }

    /**
     * Processes, normalizes and initializes the configuration of the entities
     * that are managed by the backend. Several configuration formats are allowed,
     * so this method normalizes them all.
     *
     * @param  array $entitiesConfiguration
     * @return array The full entity configuration
     */
    protected function getEntitiesConfiguration(array $entitiesConfiguration)
    {
        if (0 === count($entitiesConfiguration)) {
            return $entitiesConfiguration;
        }

        $configuration = $this->normalizeEntitiesConfiguration($entitiesConfiguration);
        $configuration = $this->processEntitiesConfiguration($configuration);
        $configuration = $this->ensureThatEntityNamesAreUnique($configuration);

        return $configuration;
    }

    /**
     * Transforms the two simple configuration formats into the full expanded
     * configuration. This allows to reuse the same method to process any of the
     * different configuration formats.
     *
     * These are the two simple formats allowed:
     *
     * # simple config with no custom entity label
     * easy_admin:
     *     entities:
     *         - AppBundle\Entity\User
     *
     * # simple config with custom entity label
     * easy_admin:
     *     entities:
     *         User: AppBundle\Entity\User
     *
     * And this is the full expanded configuration syntax generated by this method:
     *
     * easy_admin:
     *     entities:
     *         User:
     *             class: AppBundle\Entity\User
     *
     * @param  array $simpleConfiguration The entity configuration in one of the simplified formats
     * @return array The normalized configuration
     */
    private function normalizeEntitiesConfiguration(array $entitiesConfiguration)
    {
        $normalizedConfiguration = array();

        foreach ($entitiesConfiguration as $entityName => $entityConfiguration) {
            if (is_integer($entityName)) {
                // the simplest configuration format defines no custom entity names,
                // so let's use the name of the entity class as its name
                $entityClass = $entityConfiguration;
                $entityClassParts = explode('\\', $entityClass);
                $entityName = end($entityClassParts);

                $normalizedConfiguration[$entityName] = array(
                    'class' => $entityClass,
                );
            } else {
                $normalizedConfiguration[$entityName] = $entityConfiguration;
            }
        }

        return $normalizedConfiguration;
    }

    /**
     * Normalizes and initializes the configuration of the given entities to
     * simplify the option processing of the other methods and functions.
     *
     * @param  array $entitiesConfiguration
     * @return array The configured entities
     */
    private function processEntitiesConfiguration(array $entitiesConfiguration)
    {
        $entities = array();

        foreach ($entitiesConfiguration as $entityName => $entityConfiguration) {
            // copy the original entity configuration to not loose any of its options
            $config = $entityConfiguration;

            // basic entity configuration
            $config['label'] = $entityName;
            $config['name'] = $entityName;

            // configuration for the actions related to the entity ('list', 'edit', etc.)
            foreach (array('edit', 'list', 'new', 'show') as $action) {
                // if needed, initialize options to simplify further configuration processing
                if (!isset($config[$action])) {
                    $config[$action] = array('fields' => array());
                }
                if (!isset($config[$action]['fields'])) {
                    $config[$action]['fields'] = array();
                }

                // if the common 'form' config is defined, but not 'new' or 'edit'
                // config, just copy the 'form' config into them to simplify the rest of the code
                if (isset($config['form']['fields']) && !isset($config['edit']['fields'])) {
                    $config['edit']['fields'] = $config['form']['fields'];
                }
                if (isset($config['form']['fields']) && !isset($config['new']['fields'])) {
                    $config['new']['fields'] = $config['form']['fields'];
                }
            }

            $entities[$entityName] = $config;
        }

        return $entities;
    }

    /**
     * The name of the entity is used in the URLs of the application to define the
     * entity which should be used for each action. Obviously, the entity name
     * must be unique in the application to identify entities unequivocally.
     *
     * This method ensures that all entity names are unique by adding some suffix
     * to repeated names until they are unique.
     *
     * @param  array  $entitiesConfiguration
     * @return array The entities configuration with unique entity names
     */
    private function ensureThatEntityNamesAreUnique($entitiesConfiguration)
    {
        $configuration = array();
        $existingEntityNames = array();

        foreach ($entitiesConfiguration as $entityName => $entityConfiguration) {
            while (in_array($entityName, $existingEntityNames)) {
                $entityName .= '_';
            }
            $existingEntityNames[] = $entityName;

            $configuration[$entityName] = $entityConfiguration;
            $configuration[$entityName]['name'] = $entityName;
        }

        return $configuration;
    }
}
